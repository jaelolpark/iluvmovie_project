{"ast":null,"code":"export const createUser = user => {\n  return dispatch => {\n    fetch(\"http://localhost:3000/users\", {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      },\n      body: JSON.stringify({\n        user\n      })\n    }).then(resp => resp.json()).then(data => {\n      console.log(data);\n\n      if (data.message) {// Here you should have logic to handle invalid creation of a user.\n        // This assumes your Rails API will return a JSON object with a key of\n        // 'message' if there is an error with creating the user, i.e. invalid username\n      } else {\n        localStorage.setItem(\"token\", data.jwt);\n        dispatch(loginUser(data.user));\n      }\n    });\n  };\n};\nexport const userLoginFetch = user => {\n  return dispatch => {\n    return fetch(\"http://localhost:3000/login\", {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      },\n      body: JSON.stringify({\n        user\n      })\n    }).then(resp => resp.json()); // .then(data => {\n    //   console.log(data)\n    //   if (data.message) {\n    //     // Here you should have logic to handle invalid login credentials.\n    //     // This assumes your Rails API will return a JSON object with a key of\n    //     // 'message' if there is an error\n    //   } else {\n    //     localStorage.setItem(\"token\", data.jwt)\n    //     dispatch(loginUser(data.user))\n    //   }\n    // })\n  };\n};\n\nconst loginUser = userObj => ({\n  type: 'LOGIN_USER',\n  payload: userObj\n});\n\nexport const logoutUser = () => ({\n  type: 'LOGOUT_USER'\n});\nexport const setCurrentUser = user_id => {\n  return {\n    type: 'SET_CURRENT_USER',\n    user_id\n  };\n};","map":{"version":3,"sources":["/Users/jaelolpark/Flatiron School/iluvmovie_project/frontend_iluvmovie/src/actions/authActions.js"],"names":["createUser","user","dispatch","fetch","method","headers","Accept","body","JSON","stringify","then","resp","json","data","console","log","message","localStorage","setItem","jwt","loginUser","userLoginFetch","userObj","type","payload","logoutUser","setCurrentUser","user_id"],"mappings":"AACA,OAAO,MAAMA,UAAU,GAAGC,IAAI,IAAI;AAChC,SAAOC,QAAQ,IAAI;AACjBC,IAAAA,KAAK,CAAC,6BAAD,EAAgC;AACnCC,MAAAA,MAAM,EAAE,MAD2B;AAEnCC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,MAAM,EAAE;AAFD,OAF0B;AAMnCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACR,QAAAA;AAAD,OAAf;AAN6B,KAAhC,CAAL,CAQGS,IARH,CAQQC,IAAI,IAAIA,IAAI,CAACC,IAAL,EARhB,EASGF,IATH,CASQG,IAAI,IAAI;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;;AACA,UAAIA,IAAI,CAACG,OAAT,EAAkB,CAChB;AACA;AACA;AACD,OAJD,MAKK;AACHC,QAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BL,IAAI,CAACM,GAAnC;AACAjB,QAAAA,QAAQ,CAACkB,SAAS,CAACP,IAAI,CAACZ,IAAN,CAAV,CAAR;AACD;AACF,KApBH;AAqBD,GAtBD;AAuBD,CAxBM;AA0BP,OAAO,MAAMoB,cAAc,GAAGpB,IAAI,IAAI;AACpC,SAAOC,QAAQ,IAAI;AACjB,WAAOC,KAAK,CAAC,6BAAD,EAAgC;AAC1CC,MAAAA,MAAM,EAAE,MADkC;AAE1CC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,MAAM,EAAE;AAFD,OAFiC;AAM1CC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACR,QAAAA;AAAD,OAAf;AANoC,KAAhC,CAAL,CAQJS,IARI,CAQCC,IAAI,IAAIA,IAAI,CAACC,IAAL,EART,CAAP,CADiB,CAUf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,GArBD;AAsBD,CAvBM;;AA2BL,MAAMQ,SAAS,GAAGE,OAAO,KAAK;AAC5BC,EAAAA,IAAI,EAAE,YADsB;AAE5BC,EAAAA,OAAO,EAAEF;AAFmB,CAAL,CAAzB;;AAMA,OAAO,MAAMG,UAAU,GAAG,OAAO;AAC/BF,EAAAA,IAAI,EAAE;AADyB,CAAP,CAAnB;AAIP,OAAO,MAAMG,cAAc,GAAIC,OAAD,IAAa;AAC3C,SAAO;AACJJ,IAAAA,IAAI,EAAE,kBADF;AAEJI,IAAAA;AAFI,GAAP;AAID,CALQ","sourcesContent":["\nexport const createUser = user => {\n  return dispatch => {\n    fetch(\"http://localhost:3000/users\", {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      },\n      body: JSON.stringify({user})\n    })\n      .then(resp => resp.json())\n      .then(data => {\n        console.log(data)\n        if (data.message) {\n          // Here you should have logic to handle invalid creation of a user.\n          // This assumes your Rails API will return a JSON object with a key of\n          // 'message' if there is an error with creating the user, i.e. invalid username\n        }\n        else {\n          localStorage.setItem(\"token\", data.jwt)\n          dispatch(loginUser(data.user))\n        }\n      })\n  }\n}\n\nexport const userLoginFetch = user => {\n  return dispatch => {\n    return fetch(\"http://localhost:3000/login\", {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n      body: JSON.stringify({user})\n    })\n      .then(resp => resp.json())\n      // .then(data => {\n      //   console.log(data)\n      //   if (data.message) {\n      //     // Here you should have logic to handle invalid login credentials.\n      //     // This assumes your Rails API will return a JSON object with a key of\n      //     // 'message' if there is an error\n      //   } else {\n      //     localStorage.setItem(\"token\", data.jwt)\n      //     dispatch(loginUser(data.user))\n      //   }\n      // })\n  }\n}\n\n\n\n  const loginUser = userObj => ({\n    type: 'LOGIN_USER',\n    payload: userObj\n  })\n\n\n  export const logoutUser = () => ({\n    type: 'LOGOUT_USER'\n})\n\n  export const setCurrentUser = (user_id) => {\n  return {\n     type: 'SET_CURRENT_USER',\n     user_id\n  }\n} "]},"metadata":{},"sourceType":"module"}